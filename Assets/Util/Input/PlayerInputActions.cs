//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.4.1
//     from Assets/Util/Input/PlayerInputActions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerInputActions : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerInputActions()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerInputActions"",
    ""maps"": [
        {
            ""name"": ""ManualShipThrusterControl"",
            ""id"": ""f062a2a2-29b1-4c39-8eb1-0bf2d5aa483e"",
            ""actions"": [
                {
                    ""name"": ""PitchAndRollStick"",
                    ""type"": ""Value"",
                    ""id"": ""39bfc9a6-9582-4fe8-99cb-caa9f9cf32e9"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""StickZ"",
                    ""type"": ""Value"",
                    ""id"": ""27e2790c-3929-4271-8c6d-81143733229d"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""PitchAndYawMouse"",
                    ""type"": ""Value"",
                    ""id"": ""92b54d6e-8b4a-4811-86b1-efc2e632c597"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""StickRz"",
                    ""type"": ""Button"",
                    ""id"": ""e45f8941-ef1f-428f-a20d-bf3bd5dd366e"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""TestRailgunFire"",
                    ""type"": ""Button"",
                    ""id"": ""b7dc320d-6396-4b39-952d-1709c018c2e9"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Throttle"",
                    ""type"": ""Value"",
                    ""id"": ""6d9d2549-ad56-48c3-af21-e3c26b0166e9"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""4bd4f86a-85e9-4805-9267-5e5a51357f08"",
                    ""path"": ""<Joystick>/stick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PitchAndRollStick"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""2715bd2b-6a09-4617-931c-d02d3dca91e1"",
                    ""path"": ""<HID::Logitech X52 Professional H.O.T.A.S.>/z"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""StickZ"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""12092e6e-61e3-4dfb-9d8a-e35200f17f40"",
                    ""path"": ""<Mouse>/delta"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PitchAndYawMouse"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""21e50905-2021-4a61-a931-3f6cdd0b1915"",
                    ""path"": ""<HID::Logitech X52 Professional H.O.T.A.S.>/rz"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""StickRz"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c28be392-aa55-4eb9-b9a2-f2aed395e8ad"",
                    ""path"": ""<Joystick>/trigger"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""TestRailgunFire"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""Keyboard"",
                    ""id"": ""0b4aba4b-72de-4e68-8425-fe26ae7fe4dd"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Throttle"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""0c4c3076-1670-4ab9-a652-bed9580cc675"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Throttle"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""fbd27ffd-02f7-4ac8-91aa-2a845b24d653"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Throttle"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // ManualShipThrusterControl
        m_ManualShipThrusterControl = asset.FindActionMap("ManualShipThrusterControl", throwIfNotFound: true);
        m_ManualShipThrusterControl_PitchAndRollStick = m_ManualShipThrusterControl.FindAction("PitchAndRollStick", throwIfNotFound: true);
        m_ManualShipThrusterControl_StickZ = m_ManualShipThrusterControl.FindAction("StickZ", throwIfNotFound: true);
        m_ManualShipThrusterControl_PitchAndYawMouse = m_ManualShipThrusterControl.FindAction("PitchAndYawMouse", throwIfNotFound: true);
        m_ManualShipThrusterControl_StickRz = m_ManualShipThrusterControl.FindAction("StickRz", throwIfNotFound: true);
        m_ManualShipThrusterControl_TestRailgunFire = m_ManualShipThrusterControl.FindAction("TestRailgunFire", throwIfNotFound: true);
        m_ManualShipThrusterControl_Throttle = m_ManualShipThrusterControl.FindAction("Throttle", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // ManualShipThrusterControl
    private readonly InputActionMap m_ManualShipThrusterControl;
    private IManualShipThrusterControlActions m_ManualShipThrusterControlActionsCallbackInterface;
    private readonly InputAction m_ManualShipThrusterControl_PitchAndRollStick;
    private readonly InputAction m_ManualShipThrusterControl_StickZ;
    private readonly InputAction m_ManualShipThrusterControl_PitchAndYawMouse;
    private readonly InputAction m_ManualShipThrusterControl_StickRz;
    private readonly InputAction m_ManualShipThrusterControl_TestRailgunFire;
    private readonly InputAction m_ManualShipThrusterControl_Throttle;
    public struct ManualShipThrusterControlActions
    {
        private @PlayerInputActions m_Wrapper;
        public ManualShipThrusterControlActions(@PlayerInputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @PitchAndRollStick => m_Wrapper.m_ManualShipThrusterControl_PitchAndRollStick;
        public InputAction @StickZ => m_Wrapper.m_ManualShipThrusterControl_StickZ;
        public InputAction @PitchAndYawMouse => m_Wrapper.m_ManualShipThrusterControl_PitchAndYawMouse;
        public InputAction @StickRz => m_Wrapper.m_ManualShipThrusterControl_StickRz;
        public InputAction @TestRailgunFire => m_Wrapper.m_ManualShipThrusterControl_TestRailgunFire;
        public InputAction @Throttle => m_Wrapper.m_ManualShipThrusterControl_Throttle;
        public InputActionMap Get() { return m_Wrapper.m_ManualShipThrusterControl; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(ManualShipThrusterControlActions set) { return set.Get(); }
        public void SetCallbacks(IManualShipThrusterControlActions instance)
        {
            if (m_Wrapper.m_ManualShipThrusterControlActionsCallbackInterface != null)
            {
                @PitchAndRollStick.started -= m_Wrapper.m_ManualShipThrusterControlActionsCallbackInterface.OnPitchAndRollStick;
                @PitchAndRollStick.performed -= m_Wrapper.m_ManualShipThrusterControlActionsCallbackInterface.OnPitchAndRollStick;
                @PitchAndRollStick.canceled -= m_Wrapper.m_ManualShipThrusterControlActionsCallbackInterface.OnPitchAndRollStick;
                @StickZ.started -= m_Wrapper.m_ManualShipThrusterControlActionsCallbackInterface.OnStickZ;
                @StickZ.performed -= m_Wrapper.m_ManualShipThrusterControlActionsCallbackInterface.OnStickZ;
                @StickZ.canceled -= m_Wrapper.m_ManualShipThrusterControlActionsCallbackInterface.OnStickZ;
                @PitchAndYawMouse.started -= m_Wrapper.m_ManualShipThrusterControlActionsCallbackInterface.OnPitchAndYawMouse;
                @PitchAndYawMouse.performed -= m_Wrapper.m_ManualShipThrusterControlActionsCallbackInterface.OnPitchAndYawMouse;
                @PitchAndYawMouse.canceled -= m_Wrapper.m_ManualShipThrusterControlActionsCallbackInterface.OnPitchAndYawMouse;
                @StickRz.started -= m_Wrapper.m_ManualShipThrusterControlActionsCallbackInterface.OnStickRz;
                @StickRz.performed -= m_Wrapper.m_ManualShipThrusterControlActionsCallbackInterface.OnStickRz;
                @StickRz.canceled -= m_Wrapper.m_ManualShipThrusterControlActionsCallbackInterface.OnStickRz;
                @TestRailgunFire.started -= m_Wrapper.m_ManualShipThrusterControlActionsCallbackInterface.OnTestRailgunFire;
                @TestRailgunFire.performed -= m_Wrapper.m_ManualShipThrusterControlActionsCallbackInterface.OnTestRailgunFire;
                @TestRailgunFire.canceled -= m_Wrapper.m_ManualShipThrusterControlActionsCallbackInterface.OnTestRailgunFire;
                @Throttle.started -= m_Wrapper.m_ManualShipThrusterControlActionsCallbackInterface.OnThrottle;
                @Throttle.performed -= m_Wrapper.m_ManualShipThrusterControlActionsCallbackInterface.OnThrottle;
                @Throttle.canceled -= m_Wrapper.m_ManualShipThrusterControlActionsCallbackInterface.OnThrottle;
            }
            m_Wrapper.m_ManualShipThrusterControlActionsCallbackInterface = instance;
            if (instance != null)
            {
                @PitchAndRollStick.started += instance.OnPitchAndRollStick;
                @PitchAndRollStick.performed += instance.OnPitchAndRollStick;
                @PitchAndRollStick.canceled += instance.OnPitchAndRollStick;
                @StickZ.started += instance.OnStickZ;
                @StickZ.performed += instance.OnStickZ;
                @StickZ.canceled += instance.OnStickZ;
                @PitchAndYawMouse.started += instance.OnPitchAndYawMouse;
                @PitchAndYawMouse.performed += instance.OnPitchAndYawMouse;
                @PitchAndYawMouse.canceled += instance.OnPitchAndYawMouse;
                @StickRz.started += instance.OnStickRz;
                @StickRz.performed += instance.OnStickRz;
                @StickRz.canceled += instance.OnStickRz;
                @TestRailgunFire.started += instance.OnTestRailgunFire;
                @TestRailgunFire.performed += instance.OnTestRailgunFire;
                @TestRailgunFire.canceled += instance.OnTestRailgunFire;
                @Throttle.started += instance.OnThrottle;
                @Throttle.performed += instance.OnThrottle;
                @Throttle.canceled += instance.OnThrottle;
            }
        }
    }
    public ManualShipThrusterControlActions @ManualShipThrusterControl => new ManualShipThrusterControlActions(this);
    public interface IManualShipThrusterControlActions
    {
        void OnPitchAndRollStick(InputAction.CallbackContext context);
        void OnStickZ(InputAction.CallbackContext context);
        void OnPitchAndYawMouse(InputAction.CallbackContext context);
        void OnStickRz(InputAction.CallbackContext context);
        void OnTestRailgunFire(InputAction.CallbackContext context);
        void OnThrottle(InputAction.CallbackContext context);
    }
}
